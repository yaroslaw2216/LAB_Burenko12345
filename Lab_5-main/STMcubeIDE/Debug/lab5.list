
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002830  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d4  080029d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080029d4  080029d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029dc  080029dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e0  080029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080029e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  080029f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080029f4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090e0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015be  00000000  00000000  00029120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014eeb  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009728  00000000  00000000  000407f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086afc  00000000  00000000  00049f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0a17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  000d0a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080029ac 	.word	0x080029ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080029ac 	.word	0x080029ac

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb4a 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f824 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f98e 	bl	8000804 <MX_GPIO_Init>
  MX_TIM9_Init();
 80004e8:	f000 f904 	bl	80006f4 <MX_TIM9_Init>
  MX_TIM10_Init();
 80004ec:	f000 f93c 	bl	8000768 <MX_TIM10_Init>
  MX_TIM5_Init();
 80004f0:	f000 f87c 	bl	80005ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <main+0x48>)
 80004f6:	f001 fab9 	bl	8001a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <main+0x4c>)
 80004fc:	f001 fab6 	bl	8001a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x50>)
 8000502:	f001 fab3 	bl	8001a6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x50>)
 800050a:	f001 fb6b 	bl	8001be4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800050e:	2100      	movs	r1, #0
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x48>)
 8000512:	f001 fb67 	bl	8001be4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000516:	2104      	movs	r1, #4
 8000518:	4801      	ldr	r0, [pc, #4]	; (8000520 <main+0x48>)
 800051a:	f001 fb63 	bl	8001be4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800051e:	e7fe      	b.n	800051e <main+0x46>
 8000520:	2000002c 	.word	0x2000002c
 8000524:	20000074 	.word	0x20000074
 8000528:	200000bc 	.word	0x200000bc

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fa2e 	bl	800299c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <SystemClock_Config+0xb8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <SystemClock_Config+0xb8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xbc>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fdef 	bl	8001184 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f98e 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f852 	bl	8001674 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d6:	f000 f979 	bl	80008cc <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <MX_TIM5_Init+0x100>)
 800061e:	4a34      	ldr	r2, [pc, #208]	; (80006f0 <MX_TIM5_Init+0x104>)
 8000620:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1600-1;
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <MX_TIM5_Init+0x100>)
 8000624:	f240 623f 	movw	r2, #1599	; 0x63f
 8000628:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <MX_TIM5_Init+0x100>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <MX_TIM5_Init+0x100>)
 8000632:	2263      	movs	r2, #99	; 0x63
 8000634:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_TIM5_Init+0x100>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <MX_TIM5_Init+0x100>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000642:	482a      	ldr	r0, [pc, #168]	; (80006ec <MX_TIM5_Init+0x100>)
 8000644:	f001 f9c2 	bl	80019cc <HAL_TIM_Base_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800064e:	f000 f93d 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065c:	4619      	mov	r1, r3
 800065e:	4823      	ldr	r0, [pc, #140]	; (80006ec <MX_TIM5_Init+0x100>)
 8000660:	f001 fd3a 	bl	80020d8 <HAL_TIM_ConfigClockSource>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800066a:	f000 f92f 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800066e:	481f      	ldr	r0, [pc, #124]	; (80006ec <MX_TIM5_Init+0x100>)
 8000670:	f001 fa5e 	bl	8001b30 <HAL_TIM_PWM_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800067a:	f000 f927 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4619      	mov	r1, r3
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <MX_TIM5_Init+0x100>)
 800068e:	f002 f8df 	bl	8002850 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000698:	f000 f918 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069c:	2360      	movs	r3, #96	; 0x60
 800069e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 14;
 80006a0:	230e      	movs	r3, #14
 80006a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	4619      	mov	r1, r3
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <MX_TIM5_Init+0x100>)
 80006b4:	f001 fc4e 	bl	8001f54 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80006be:	f000 f905 	bl	80008cc <Error_Handler>
  }
  sConfigOC.Pulse = 24;
 80006c2:	2318      	movs	r3, #24
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2204      	movs	r2, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <MX_TIM5_Init+0x100>)
 80006ce:	f001 fc41 	bl	8001f54 <HAL_TIM_PWM_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 80006d8:	f000 f8f8 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <MX_TIM5_Init+0x100>)
 80006de:	f000 f977 	bl	80009d0 <HAL_TIM_MspPostInit>

}
 80006e2:	bf00      	nop
 80006e4:	3738      	adds	r7, #56	; 0x38
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	40000c00 	.word	0x40000c00

080006f4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_TIM9_Init+0x6c>)
 8000708:	4a16      	ldr	r2, [pc, #88]	; (8000764 <MX_TIM9_Init+0x70>)
 800070a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8000-1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_TIM9_Init+0x6c>)
 800070e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000712:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_TIM9_Init+0x6c>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_TIM9_Init+0x6c>)
 800071c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000720:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_TIM9_Init+0x6c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_TIM9_Init+0x6c>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_TIM9_Init+0x6c>)
 8000730:	f001 f94c 	bl	80019cc <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800073a:	f000 f8c7 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_TIM9_Init+0x6c>)
 800074a:	f001 fcc5 	bl	80020d8 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000754:	f000 f8ba 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000074 	.word	0x20000074
 8000764:	40014000 	.word	0x40014000

08000768 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_TIM10_Init+0x94>)
 8000782:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <MX_TIM10_Init+0x98>)
 8000784:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000-1;
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_TIM10_Init+0x94>)
 8000788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800078c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_TIM10_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_TIM10_Init+0x94>)
 8000796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800079a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_TIM10_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_TIM10_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007a8:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_TIM10_Init+0x94>)
 80007aa:	f001 f90f 	bl	80019cc <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80007b4:	f000 f88a 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <MX_TIM10_Init+0x94>)
 80007ba:	f001 f9b9 	bl	8001b30 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f882 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <MX_TIM10_Init+0x94>)
 80007e0:	f001 fbb8 	bl	8001f54 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80007ea:	f000 f86f 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <MX_TIM10_Init+0x94>)
 80007f0:	f000 f8ee 	bl	80009d0 <HAL_TIM_MspPostInit>

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000bc 	.word	0x200000bc
 8000800:	40014400 	.word	0x40014400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_GPIO_Init+0x4c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <MX_GPIO_Init+0x4c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_GPIO_Init+0x4c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_GPIO_Init+0x4c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <MX_GPIO_Init+0x4c>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_GPIO_Init+0x4c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

static int temp = 0;
static int flag = 1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM9) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d124      	bne.n	80008b0 <HAL_TIM_PeriodElapsedCallback+0x5c>

		int inc = 100 * flag;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2264      	movs	r2, #100	; 0x64
 800086c:	fb02 f303 	mul.w	r3, r2, r3
 8000870:	60fb      	str	r3, [r7, #12]
		temp += inc;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800087c:	6013      	str	r3, [r2, #0]
		if (temp > 1000 || temp < 0) {
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000886:	dc03      	bgt.n	8000890 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	da0a      	bge.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x52>
			flag *= -1;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	425b      	negs	r3, r3
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000898:	6013      	str	r3, [r2, #0]
			temp -= inc;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008a4:	6013      	str	r3, [r2, #0]
		}
		__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, temp);
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34

	}

}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40014000 	.word	0x40014000
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000104 	.word	0x20000104
 80008c8:	200000bc 	.word	0x200000bc

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <HAL_TIM_Base_MspInit+0x98>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10e      	bne.n	8000958 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000956:	e02e      	b.n	80009b6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <HAL_TIM_Base_MspInit+0xa0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d116      	bne.n	8000990 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 800096c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2018      	movs	r0, #24
 8000984:	f000 fa43 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000988:	2018      	movs	r0, #24
 800098a:	f000 fa5c 	bl	8000e46 <HAL_NVIC_EnableIRQ>
}
 800098e:	e012      	b.n	80009b6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_TIM_Base_MspInit+0xa4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10d      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_TIM_Base_MspInit+0x9c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40000c00 	.word	0x40000c00
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40014000 	.word	0x40014000
 80009cc:	40014400 	.word	0x40014400

080009d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <HAL_TIM_MspPostInit+0xb0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d11e      	bne.n	8000a30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_TIM_MspPostInit+0xb4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_TIM_MspPostInit+0xb4>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_TIM_MspPostInit+0xb4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4817      	ldr	r0, [pc, #92]	; (8000a88 <HAL_TIM_MspPostInit+0xb8>)
 8000a2a:	f000 fa27 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000a2e:	e023      	b.n	8000a78 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <HAL_TIM_MspPostInit+0xbc>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d11e      	bne.n	8000a78 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_TIM_MspPostInit+0xb4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_TIM_MspPostInit+0xb4>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_TIM_MspPostInit+0xb4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <HAL_TIM_MspPostInit+0xc0>)
 8000a74:	f000 fa02 	bl	8000e7c <HAL_GPIO_Init>
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40000c00 	.word	0x40000c00
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40014400 	.word	0x40014400
 8000a90:	40020400 	.word	0x40020400

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f89a 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000aee:	f001 f929 	bl	8001d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000074 	.word	0x20000074

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b3c:	4c0b      	ldr	r4, [pc, #44]	; (8000b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4a:	f7ff ffd7 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f001 ff01 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fcc1 	bl	80004d8 <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b64:	080029e4 	.word	0x080029e4
  ldr r2, =_sbss
 8000b68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b6c:	2000010c 	.word	0x2000010c

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_Init+0x40>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_Init+0x40>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x40>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f92b 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fe96 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f943 	bl	8000e62 <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 f90b 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000008 	.word	0x20000008

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	20000108 	.word	0x20000108

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000108 	.word	0x20000108

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e159      	b.n	800114c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8148 	bne.w	8001146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a2 	beq.w	8001146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x2f0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x202>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2f4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1fe>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_GPIO_Init+0x2f8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1fa>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1f6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a45      	ldr	r2, [pc, #276]	; (800117c <HAL_GPIO_Init+0x300>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1f2>
 800106a:	2304      	movs	r3, #4
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800106e:	2307      	movs	r3, #7
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_GPIO_Init+0x304>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f aea2 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e267      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d075      	beq.n	800128e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d00c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b85      	ldr	r3, [pc, #532]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d112      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c6:	d10b      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d05b      	beq.n	800128c <HAL_RCC_OscConfig+0x108>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d157      	bne.n	800128c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e242      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d106      	bne.n	80011f8 <HAL_RCC_OscConfig+0x74>
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a75      	ldr	r2, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x98>
 8001202:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6c      	ldr	r2, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a68      	ldr	r2, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a65      	ldr	r2, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fd00 	bl	8000c40 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcfc 	bl	8000c40 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e207      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xc0>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fcec 	bl	8000c40 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fce8 	bl	8000c40 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1f3      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0xe8>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c7      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4937      	ldr	r1, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <HAL_RCC_OscConfig+0x244>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fca1 	bl	8000c40 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fc9d 	bl	8000c40 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a8      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4925      	ldr	r1, [pc, #148]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x244>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fc80 	bl	8000c40 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fc7c 	bl	8000c40 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e187      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d036      	beq.n	80013dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_RCC_OscConfig+0x248>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff fc60 	bl	8000c40 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc5c 	bl	8000c40 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e167      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x200>
 80013a2:	e01b      	b.n	80013dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_OscConfig+0x248>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc49 	bl	8000c40 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e00e      	b.n	80013d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc45 	bl	8000c40 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d907      	bls.n	80013d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e150      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470000 	.word	0x42470000
 80013cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b88      	ldr	r3, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ea      	bne.n	80013b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8097 	beq.w	8001518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ee:	4b81      	ldr	r3, [pc, #516]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b7d      	ldr	r3, [pc, #500]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a7c      	ldr	r2, [pc, #496]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b74      	ldr	r3, [pc, #464]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a73      	ldr	r2, [pc, #460]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc05 	bl	8000c40 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fc01 	bl	8000c40 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e10c      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x2ea>
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x30c>
 8001476:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	4b5c      	ldr	r3, [pc, #368]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a5b      	ldr	r2, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d015      	beq.n	80014dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fbc6 	bl	8000c40 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fbc2 	bl	8000c40 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0cb      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ee      	beq.n	80014b8 <HAL_RCC_OscConfig+0x334>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbb0 	bl	8000c40 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbac 	bl	8000c40 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0b5      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ee      	bne.n	80014e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80a1 	beq.w	8001664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d05c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d141      	bne.n	80015ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb80 	bl	8000c40 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb7c 	bl	8000c40 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e087      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	019b      	lsls	r3, r3, #6
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	3b01      	subs	r3, #1
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	491b      	ldr	r1, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x478>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fb55 	bl	8000c40 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb51 	bl	8000c40 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e05c      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x416>
 80015b8:	e054      	b.n	8001664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb3e 	bl	8000c40 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fb3a 	bl	8000c40 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e045      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x444>
 80015e6:	e03d      	b.n	8001664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e038      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000
 80015fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x4ec>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d028      	beq.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d121      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d11a      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001630:	4013      	ands	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001638:	4293      	cmp	r3, r2
 800163a:	d111      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	3b01      	subs	r3, #1
 800164a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cc      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d90c      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0b8      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	494d      	ldr	r1, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d044      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e07f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d003      	beq.n	8001732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e067      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4934      	ldr	r1, [pc, #208]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa6c 	bl	8000c40 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa68 	bl	8000c40 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e04f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d20c      	bcs.n	80017bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e032      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4916      	ldr	r1, [pc, #88]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	490e      	ldr	r1, [pc, #56]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fa:	f000 f821 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	5ccb      	ldrb	r3, [r1, r3]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f9cc 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00
 8001830:	40023800 	.word	0x40023800
 8001834:	080029c4 	.word	0x080029c4
 8001838:	20000004 	.word	0x20000004
 800183c:	20000008 	.word	0x20000008

08001840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001844:	b090      	sub	sp, #64	; 0x40
 8001846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d00d      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x40>
 8001864:	2b08      	cmp	r3, #8
 8001866:	f200 80a1 	bhi.w	80019ac <HAL_RCC_GetSysClockFreq+0x16c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x34>
 800186e:	2b04      	cmp	r3, #4
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x3a>
 8001872:	e09b      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001878:	e09b      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187a:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800187e:	e098      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	2200      	movs	r2, #0
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	627a      	str	r2, [r7, #36]	; 0x24
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018a8:	2100      	movs	r1, #0
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ac:	fb03 f201 	mul.w	r2, r3, r1
 80018b0:	2300      	movs	r3, #0
 80018b2:	fb00 f303 	mul.w	r3, r0, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ba:	fba0 1202 	umull	r1, r2, r0, r2
 80018be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c0:	460a      	mov	r2, r1
 80018c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c6:	4413      	add	r3, r2
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018cc:	2200      	movs	r2, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	61fa      	str	r2, [r7, #28]
 80018d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018da:	f7fe fc7b 	bl	80001d4 <__aeabi_uldivmod>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4613      	mov	r3, r2
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e6:	e053      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	617a      	str	r2, [r7, #20]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018fa:	f04f 0b00 	mov.w	fp, #0
 80018fe:	4652      	mov	r2, sl
 8001900:	465b      	mov	r3, fp
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0159      	lsls	r1, r3, #5
 800190c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001910:	0150      	lsls	r0, r2, #5
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	ebb2 080a 	subs.w	r8, r2, sl
 800191a:	eb63 090b 	sbc.w	r9, r3, fp
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800192a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800192e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001932:	ebb2 0408 	subs.w	r4, r2, r8
 8001936:	eb63 0509 	sbc.w	r5, r3, r9
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	00eb      	lsls	r3, r5, #3
 8001944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001948:	00e2      	lsls	r2, r4, #3
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	eb14 030a 	adds.w	r3, r4, sl
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	eb45 030b 	adc.w	r3, r5, fp
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	2200      	movs	r2, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	60fa      	str	r2, [r7, #12]
 8001980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001984:	f7fe fc26 	bl	80001d4 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3740      	adds	r7, #64	; 0x40
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	017d7840 	.word	0x017d7840

080019cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e041      	b.n	8001a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe ff98 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3304      	adds	r3, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f000 fc54 	bl	80022b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d001      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e044      	b.n	8001b0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_TIM_Base_Start_IT+0xb0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aae:	d013      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_TIM_Base_Start_IT+0xbc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d010      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	e007      	b.n	8001b0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40000800 	.word	0x40000800
 8001b28:	40000c00 	.word	0x40000c00
 8001b2c:	40014000 	.word	0x40014000

08001b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 fba2 	bl	80022b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_TIM_PWM_Start+0x24>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e022      	b.n	8001c4e <HAL_TIM_PWM_Start+0x6a>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d109      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x3e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	e015      	b.n	8001c4e <HAL_TIM_PWM_Start+0x6a>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d109      	bne.n	8001c3c <HAL_TIM_PWM_Start+0x58>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e008      	b.n	8001c4e <HAL_TIM_PWM_Start+0x6a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e068      	b.n	8001d28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_PWM_Start+0x82>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	e013      	b.n	8001c8e <HAL_TIM_PWM_Start+0xaa>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_PWM_Start+0x92>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c74:	e00b      	b.n	8001c8e <HAL_TIM_PWM_Start+0xaa>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_PWM_Start+0xa2>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	e003      	b.n	8001c8e <HAL_TIM_PWM_Start+0xaa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2201      	movs	r2, #1
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fdb4 	bl	8002804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_TIM_PWM_Start+0x14c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_TIM_PWM_Start+0x14c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d018      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x10e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d013      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x10e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_TIM_PWM_Start+0x150>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x10e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_TIM_PWM_Start+0x154>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d009      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x10e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_TIM_PWM_Start+0x158>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x10e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_TIM_PWM_Start+0x15c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d111      	bne.n	8001d16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d010      	beq.n	8001d26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	e007      	b.n	8001d26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40014000 	.word	0x40014000

08001d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d122      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d11b      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0202 	mvn.w	r2, #2
 8001d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fa77 	bl	800227a <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa69 	bl	8002266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fa7a 	bl	800228e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d11b      	bne.n	8001df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0204 	mvn.w	r2, #4
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa4d 	bl	800227a <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fa3f 	bl	8002266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fa50 	bl	800228e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0208 	mvn.w	r2, #8
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa23 	bl	800227a <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fa15 	bl	8002266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fa26 	bl	800228e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0210 	mvn.w	r2, #16
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2208      	movs	r2, #8
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f9f9 	bl	800227a <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9eb 	bl	8002266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f9fc 	bl	800228e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0201 	mvn.w	r2, #1
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fcc6 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fd26 	bl	8002940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f9c1 	bl	80022a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0220 	mvn.w	r2, #32
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fcf0 	bl	800292c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0ae      	b.n	80020d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	f200 809f 	bhi.w	80020c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f82:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08001fbd 	.word	0x08001fbd
 8001f8c:	080020c1 	.word	0x080020c1
 8001f90:	080020c1 	.word	0x080020c1
 8001f94:	080020c1 	.word	0x080020c1
 8001f98:	08001ffd 	.word	0x08001ffd
 8001f9c:	080020c1 	.word	0x080020c1
 8001fa0:	080020c1 	.word	0x080020c1
 8001fa4:	080020c1 	.word	0x080020c1
 8001fa8:	0800203f 	.word	0x0800203f
 8001fac:	080020c1 	.word	0x080020c1
 8001fb0:	080020c1 	.word	0x080020c1
 8001fb4:	080020c1 	.word	0x080020c1
 8001fb8:	0800207f 	.word	0x0800207f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f9f8 	bl	80023b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0204 	bic.w	r2, r2, #4
 8001fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6999      	ldr	r1, [r3, #24]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	619a      	str	r2, [r3, #24]
      break;
 8001ffa:	e064      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fa3e 	bl	8002484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6999      	ldr	r1, [r3, #24]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	021a      	lsls	r2, r3, #8
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	619a      	str	r2, [r3, #24]
      break;
 800203c:	e043      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fa89 	bl	800255c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0208 	orr.w	r2, r2, #8
 8002058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0204 	bic.w	r2, r2, #4
 8002068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69d9      	ldr	r1, [r3, #28]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	61da      	str	r2, [r3, #28]
      break;
 800207c:	e023      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fad3 	bl	8002630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69d9      	ldr	r1, [r3, #28]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	021a      	lsls	r2, r3, #8
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	61da      	str	r2, [r3, #28]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
      break;
 80020c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_TIM_ConfigClockSource+0x1c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0b4      	b.n	800225e <HAL_TIM_ConfigClockSource+0x186>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212c:	d03e      	beq.n	80021ac <HAL_TIM_ConfigClockSource+0xd4>
 800212e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002132:	f200 8087 	bhi.w	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	f000 8086 	beq.w	800224a <HAL_TIM_ConfigClockSource+0x172>
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002142:	d87f      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 8002144:	2b70      	cmp	r3, #112	; 0x70
 8002146:	d01a      	beq.n	800217e <HAL_TIM_ConfigClockSource+0xa6>
 8002148:	2b70      	cmp	r3, #112	; 0x70
 800214a:	d87b      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 800214c:	2b60      	cmp	r3, #96	; 0x60
 800214e:	d050      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002150:	2b60      	cmp	r3, #96	; 0x60
 8002152:	d877      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 8002154:	2b50      	cmp	r3, #80	; 0x50
 8002156:	d03c      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002158:	2b50      	cmp	r3, #80	; 0x50
 800215a:	d873      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d058      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x13a>
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d86f      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d064      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x15a>
 8002168:	2b30      	cmp	r3, #48	; 0x30
 800216a:	d86b      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 800216c:	2b20      	cmp	r3, #32
 800216e:	d060      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x15a>
 8002170:	2b20      	cmp	r3, #32
 8002172:	d867      	bhi.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d05c      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x15a>
 8002178:	2b10      	cmp	r3, #16
 800217a:	d05a      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x15a>
 800217c:	e062      	b.n	8002244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f000 fb19 	bl	80027c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	609a      	str	r2, [r3, #8]
      break;
 80021aa:	e04f      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f000 fb02 	bl	80027c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ce:	609a      	str	r2, [r3, #8]
      break;
 80021d0:	e03c      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	461a      	mov	r2, r3
 80021e0:	f000 fa76 	bl	80026d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2150      	movs	r1, #80	; 0x50
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 facf 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 80021f0:	e02c      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6859      	ldr	r1, [r3, #4]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	461a      	mov	r2, r3
 8002200:	f000 fa95 	bl	800272e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2160      	movs	r1, #96	; 0x60
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fabf 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 8002210:	e01c      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	461a      	mov	r2, r3
 8002220:	f000 fa56 	bl	80026d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	4618      	mov	r0, r3
 800222c:	f000 faaf 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 8002230:	e00c      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f000 faa6 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 8002242:	e003      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      break;
 8002248:	e000      	b.n	800224c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800224a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a34      	ldr	r2, [pc, #208]	; (800239c <TIM_Base_SetConfig+0xe4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00f      	beq.n	80022f0 <TIM_Base_SetConfig+0x38>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d00b      	beq.n	80022f0 <TIM_Base_SetConfig+0x38>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <TIM_Base_SetConfig+0xe8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <TIM_Base_SetConfig+0x38>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <TIM_Base_SetConfig+0xec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0x38>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <TIM_Base_SetConfig+0xf0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d108      	bne.n	8002302 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xe4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01b      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d017      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <TIM_Base_SetConfig+0xe8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <TIM_Base_SetConfig+0xec>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00f      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <TIM_Base_SetConfig+0xf0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <TIM_Base_SetConfig+0xf4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <TIM_Base_SetConfig+0xf8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_Base_SetConfig+0x8a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <TIM_Base_SetConfig+0xfc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <TIM_Base_SetConfig+0xe4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d103      	bne.n	8002388 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	615a      	str	r2, [r3, #20]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40010000 	.word	0x40010000
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800
 80023a8:	40000c00 	.word	0x40000c00
 80023ac:	40014000 	.word	0x40014000
 80023b0:	40014400 	.word	0x40014400
 80023b4:	40014800 	.word	0x40014800

080023b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f023 0201 	bic.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f023 0302 	bic.w	r3, r3, #2
 8002400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <TIM_OC1_SetConfig+0xc8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10c      	bne.n	800242e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0308 	bic.w	r3, r3, #8
 800241a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <TIM_OC1_SetConfig+0xc8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d111      	bne.n	800245a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800243c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	621a      	str	r2, [r3, #32]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40010000 	.word	0x40010000

08002484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0210 	bic.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0320 	bic.w	r3, r3, #32
 80024ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <TIM_OC2_SetConfig+0xd4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d10d      	bne.n	8002500 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <TIM_OC2_SetConfig+0xd4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d113      	bne.n	8002530 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800250e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000

0800255c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <TIM_OC3_SetConfig+0xd0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10d      	bne.n	80025d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <TIM_OC3_SetConfig+0xd0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d113      	bne.n	8002606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40010000 	.word	0x40010000

08002630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	031b      	lsls	r3, r3, #12
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <TIM_OC4_SetConfig+0x9c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000

080026d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0201 	bic.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 030a 	bic.w	r3, r3, #10
 800270c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f023 0210 	bic.w	r2, r3, #16
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	031b      	lsls	r3, r3, #12
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f043 0307 	orr.w	r3, r3, #7
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2201      	movs	r2, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002864:	2302      	movs	r3, #2
 8002866:	e050      	b.n	800290a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d013      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10c      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40014000 	.word	0x40014000

0800292c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	4d0d      	ldr	r5, [pc, #52]	; (800298c <__libc_init_array+0x38>)
 8002958:	4c0d      	ldr	r4, [pc, #52]	; (8002990 <__libc_init_array+0x3c>)
 800295a:	1b64      	subs	r4, r4, r5
 800295c:	10a4      	asrs	r4, r4, #2
 800295e:	2600      	movs	r6, #0
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	4d0b      	ldr	r5, [pc, #44]	; (8002994 <__libc_init_array+0x40>)
 8002966:	4c0c      	ldr	r4, [pc, #48]	; (8002998 <__libc_init_array+0x44>)
 8002968:	f000 f820 	bl	80029ac <_init>
 800296c:	1b64      	subs	r4, r4, r5
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	2600      	movs	r6, #0
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f855 3b04 	ldr.w	r3, [r5], #4
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f855 3b04 	ldr.w	r3, [r5], #4
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	080029dc 	.word	0x080029dc
 8002990:	080029dc 	.word	0x080029dc
 8002994:	080029dc 	.word	0x080029dc
 8002998:	080029e0 	.word	0x080029e0

0800299c <memset>:
 800299c:	4402      	add	r2, r0
 800299e:	4603      	mov	r3, r0
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d100      	bne.n	80029a6 <memset+0xa>
 80029a4:	4770      	bx	lr
 80029a6:	f803 1b01 	strb.w	r1, [r3], #1
 80029aa:	e7f9      	b.n	80029a0 <memset+0x4>

080029ac <_init>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr

080029b8 <_fini>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	bf00      	nop
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr
